// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: rpc.proto

package running_trackerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrainersService_AddTrainers_FullMethodName    = "/main.TrainersService/add_trainers"
	TrainersService_GetTrainers_FullMethodName    = "/main.TrainersService/get_trainers"
	TrainersService_UpdateTrainers_FullMethodName = "/main.TrainersService/update_trainers"
)

// TrainersServiceClient is the client API for TrainersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainersServiceClient interface {
	AddTrainers(ctx context.Context, in *AddTrainersRequest, opts ...grpc.CallOption) (*AddTrainersResponse, error)
	GetTrainers(ctx context.Context, in *GetTrainersRequest, opts ...grpc.CallOption) (*GetTrainersResponse, error)
	UpdateTrainers(ctx context.Context, in *UpdateTrainersRequest, opts ...grpc.CallOption) (*UpdateTrainersResponse, error)
}

type trainersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainersServiceClient(cc grpc.ClientConnInterface) TrainersServiceClient {
	return &trainersServiceClient{cc}
}

func (c *trainersServiceClient) AddTrainers(ctx context.Context, in *AddTrainersRequest, opts ...grpc.CallOption) (*AddTrainersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTrainersResponse)
	err := c.cc.Invoke(ctx, TrainersService_AddTrainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainersServiceClient) GetTrainers(ctx context.Context, in *GetTrainersRequest, opts ...grpc.CallOption) (*GetTrainersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainersResponse)
	err := c.cc.Invoke(ctx, TrainersService_GetTrainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainersServiceClient) UpdateTrainers(ctx context.Context, in *UpdateTrainersRequest, opts ...grpc.CallOption) (*UpdateTrainersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTrainersResponse)
	err := c.cc.Invoke(ctx, TrainersService_UpdateTrainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainersServiceServer is the server API for TrainersService service.
// All implementations must embed UnimplementedTrainersServiceServer
// for forward compatibility.
type TrainersServiceServer interface {
	AddTrainers(context.Context, *AddTrainersRequest) (*AddTrainersResponse, error)
	GetTrainers(context.Context, *GetTrainersRequest) (*GetTrainersResponse, error)
	UpdateTrainers(context.Context, *UpdateTrainersRequest) (*UpdateTrainersResponse, error)
	mustEmbedUnimplementedTrainersServiceServer()
}

// UnimplementedTrainersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrainersServiceServer struct{}

func (UnimplementedTrainersServiceServer) AddTrainers(context.Context, *AddTrainersRequest) (*AddTrainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrainers not implemented")
}
func (UnimplementedTrainersServiceServer) GetTrainers(context.Context, *GetTrainersRequest) (*GetTrainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainers not implemented")
}
func (UnimplementedTrainersServiceServer) UpdateTrainers(context.Context, *UpdateTrainersRequest) (*UpdateTrainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrainers not implemented")
}
func (UnimplementedTrainersServiceServer) mustEmbedUnimplementedTrainersServiceServer() {}
func (UnimplementedTrainersServiceServer) testEmbeddedByValue()                         {}

// UnsafeTrainersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainersServiceServer will
// result in compilation errors.
type UnsafeTrainersServiceServer interface {
	mustEmbedUnimplementedTrainersServiceServer()
}

func RegisterTrainersServiceServer(s grpc.ServiceRegistrar, srv TrainersServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrainersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrainersService_ServiceDesc, srv)
}

func _TrainersService_AddTrainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainersServiceServer).AddTrainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainersService_AddTrainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainersServiceServer).AddTrainers(ctx, req.(*AddTrainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainersService_GetTrainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainersServiceServer).GetTrainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainersService_GetTrainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainersServiceServer).GetTrainers(ctx, req.(*GetTrainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainersService_UpdateTrainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainersServiceServer).UpdateTrainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainersService_UpdateTrainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainersServiceServer).UpdateTrainers(ctx, req.(*UpdateTrainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainersService_ServiceDesc is the grpc.ServiceDesc for TrainersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.TrainersService",
	HandlerType: (*TrainersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add_trainers",
			Handler:    _TrainersService_AddTrainers_Handler,
		},
		{
			MethodName: "get_trainers",
			Handler:    _TrainersService_GetTrainers_Handler,
		},
		{
			MethodName: "update_trainers",
			Handler:    _TrainersService_UpdateTrainers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
